"""
[See type definition](https://app.contentful.com/spaces/8hutbyum2dgr/content_types/armour)
"""
type Armour implements Entry {
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): ArmourDescription
  linkedFrom(allowedLocales: [String]): ArmourLinkingCollections
  name(locale: String): String
  specialRulesCollection(limit: Int = 100, locale: String, order: [ArmourSpecialRulesCollectionOrder], preview: Boolean, skip: Int = 0, where: SpecialRuleFilter): ArmourSpecialRulesCollection
  sys: Sys!
}

type ArmourCollection {
  items: [Armour]!
  limit: Int!
  skip: Int!
  total: Int!
}

type ArmourDescription {
  json: JSON!
  links: ArmourDescriptionLinks!
}

type ArmourDescriptionAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type ArmourDescriptionEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type ArmourDescriptionLinks {
  assets: ArmourDescriptionAssets!
  entries: ArmourDescriptionEntries!
  resources: ArmourDescriptionResources!
}

type ArmourDescriptionResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

input ArmourFilter {
  AND: [ArmourFilter]
  OR: [ArmourFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  specialRules: cfSpecialRuleNestedFilter
  specialRulesCollection_exists: Boolean
  sys: SysFilter
}

type ArmourLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  henchmanCollection(limit: Int = 100, locale: String, order: [ArmourLinkingCollectionsHenchmanCollectionOrder], preview: Boolean, skip: Int = 0): HenchmanCollection
  heroCollection(limit: Int = 100, locale: String, order: [ArmourLinkingCollectionsHeroCollectionOrder], preview: Boolean, skip: Int = 0): HeroCollection
}

enum ArmourLinkingCollectionsHenchmanCollectionOrder {
  count_ASC
  count_DESC
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

enum ArmourLinkingCollectionsHeroCollectionOrder {
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

enum ArmourOrder {
  name_ASC
  name_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ArmourSpecialRulesCollection {
  items: [SpecialRule]!
  limit: Int!
  skip: Int!
  total: Int!
}

enum ArmourSpecialRulesCollectionOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
}

"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  contentType(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  fileName(locale: String): String
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
  size(locale: String): Int
  sys: Sys!
  title(locale: String): String
  url(locale: String, transform: ImageTransformOptions): String
  width(locale: String): Int
}

type AssetCollection {
  items: [Asset]!
  limit: Int!
  skip: Int!
  total: Int!
}

input AssetFilter {
  AND: [AssetFilter]
  OR: [AssetFilter]
  contentType: String
  contentType_contains: String
  contentType_exists: Boolean
  contentType_in: [String]
  contentType_not: String
  contentType_not_contains: String
  contentType_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  fileName: String
  fileName_contains: String
  fileName_exists: Boolean
  fileName_in: [String]
  fileName_not: String
  fileName_not_contains: String
  fileName_not_in: [String]
  height: Int
  height_exists: Boolean
  height_gt: Int
  height_gte: Int
  height_in: [Int]
  height_lt: Int
  height_lte: Int
  height_not: Int
  height_not_in: [Int]
  size: Int
  size_exists: Boolean
  size_gt: Int
  size_gte: Int
  size_in: [Int]
  size_lt: Int
  size_lte: Int
  size_not: Int
  size_not_in: [Int]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
  width: Int
  width_exists: Boolean
  width_gt: Int
  width_gte: Int
  width_in: [Int]
  width_lt: Int
  width_lte: Int
  width_not: Int
  width_not_in: [Int]
}

type AssetLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum AssetOrder {
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  size_ASC
  size_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
  width_ASC
  width_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/8hutbyum2dgr/content_types/blackPowderWeapon)
"""
type BlackPowderWeapon implements Entry {
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): BlackPowderWeaponDescription
  linkedFrom(allowedLocales: [String]): BlackPowderWeaponLinkingCollections
  name(locale: String): String
  range(locale: String): Int
  specialRulesCollection(limit: Int = 100, locale: String, order: [BlackPowderWeaponSpecialRulesCollectionOrder], preview: Boolean, skip: Int = 0, where: SpecialRuleFilter): BlackPowderWeaponSpecialRulesCollection
  strength(locale: String): Int
  sys: Sys!
}

type BlackPowderWeaponCollection {
  items: [BlackPowderWeapon]!
  limit: Int!
  skip: Int!
  total: Int!
}

type BlackPowderWeaponDescription {
  json: JSON!
  links: BlackPowderWeaponDescriptionLinks!
}

type BlackPowderWeaponDescriptionAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type BlackPowderWeaponDescriptionEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type BlackPowderWeaponDescriptionLinks {
  assets: BlackPowderWeaponDescriptionAssets!
  entries: BlackPowderWeaponDescriptionEntries!
  resources: BlackPowderWeaponDescriptionResources!
}

type BlackPowderWeaponDescriptionResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

input BlackPowderWeaponFilter {
  AND: [BlackPowderWeaponFilter]
  OR: [BlackPowderWeaponFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  range: Int
  range_exists: Boolean
  range_gt: Int
  range_gte: Int
  range_in: [Int]
  range_lt: Int
  range_lte: Int
  range_not: Int
  range_not_in: [Int]
  specialRules: cfSpecialRuleNestedFilter
  specialRulesCollection_exists: Boolean
  strength: Int
  strength_exists: Boolean
  strength_gt: Int
  strength_gte: Int
  strength_in: [Int]
  strength_lt: Int
  strength_lte: Int
  strength_not: Int
  strength_not_in: [Int]
  sys: SysFilter
}

type BlackPowderWeaponLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  henchmanCollection(limit: Int = 100, locale: String, order: [BlackPowderWeaponLinkingCollectionsHenchmanCollectionOrder], preview: Boolean, skip: Int = 0): HenchmanCollection
  heroCollection(limit: Int = 100, locale: String, order: [BlackPowderWeaponLinkingCollectionsHeroCollectionOrder], preview: Boolean, skip: Int = 0): HeroCollection
}

enum BlackPowderWeaponLinkingCollectionsHenchmanCollectionOrder {
  count_ASC
  count_DESC
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

enum BlackPowderWeaponLinkingCollectionsHeroCollectionOrder {
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

enum BlackPowderWeaponOrder {
  name_ASC
  name_DESC
  range_ASC
  range_DESC
  strength_ASC
  strength_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type BlackPowderWeaponSpecialRulesCollection {
  items: [SpecialRule]!
  limit: Int!
  skip: Int!
  total: Int!
}

enum BlackPowderWeaponSpecialRulesCollectionOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags: ContentfulMetadataTagsFilter
  tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_none: [String]
  id_contains_some: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  contentfulMetadata: ContentfulMetadata!
  sys: Sys!
}

type EntryCollection {
  items: [Entry]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EntryFilter {
  AND: [EntryFilter]
  OR: [EntryFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}

enum EntryOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/8hutbyum2dgr/content_types/henchman)
"""
type Henchman implements Entry {
  contentfulMetadata: ContentfulMetadata!
  count(locale: String): Int
  equipmentCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0, where: HenchmanEquipmentFilter): HenchmanEquipmentCollection
  experience(locale: String): Int
  linkedFrom(allowedLocales: [String]): HenchmanLinkingCollections
  meta(locale: String): [String]
  name(locale: String): String
  stats(locale: String): String
  sys: Sys!
  type(locale: String): String
}

type HenchmanCollection {
  items: [Henchman]!
  limit: Int!
  skip: Int!
  total: Int!
}

type HenchmanEquipmentCollection {
  items: [HenchmanEquipmentItem]!
  limit: Int!
  skip: Int!
  total: Int!
}

input HenchmanEquipmentFilter {
  AND: [HenchmanEquipmentFilter]
  OR: [HenchmanEquipmentFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  specialRulesCollection_exists: Boolean
  sys: SysFilter
}

union HenchmanEquipmentItem = Armour | BlackPowderWeapon | MeleeWeapon

input HenchmanFilter {
  AND: [HenchmanFilter]
  OR: [HenchmanFilter]
  contentfulMetadata: ContentfulMetadataFilter
  count: Int
  count_exists: Boolean
  count_gt: Int
  count_gte: Int
  count_in: [Int]
  count_lt: Int
  count_lte: Int
  count_not: Int
  count_not_in: [Int]
  equipment: cfequipmentMultiTypeNestedFilter
  equipmentCollection_exists: Boolean
  experience: Int
  experience_exists: Boolean
  experience_gt: Int
  experience_gte: Int
  experience_in: [Int]
  experience_lt: Int
  experience_lte: Int
  experience_not: Int
  experience_not_in: [Int]
  meta_contains_all: [String]
  meta_contains_none: [String]
  meta_contains_some: [String]
  meta_exists: Boolean
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  stats: String
  stats_contains: String
  stats_exists: Boolean
  stats_in: [String]
  stats_not: String
  stats_not_contains: String
  stats_not_in: [String]
  sys: SysFilter
  type: String
  type_contains: String
  type_exists: Boolean
  type_in: [String]
  type_not: String
  type_not_contains: String
  type_not_in: [String]
}

type HenchmanLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  rosterCollection(limit: Int = 100, locale: String, order: [HenchmanLinkingCollectionsRosterCollectionOrder], preview: Boolean, skip: Int = 0): RosterCollection
}

enum HenchmanLinkingCollectionsRosterCollectionOrder {
  gold_ASC
  gold_DESC
  name_ASC
  name_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
  wyrdstone_ASC
  wyrdstone_DESC
}

enum HenchmanOrder {
  count_ASC
  count_DESC
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/8hutbyum2dgr/content_types/hero)
"""
type Hero implements Entry {
  contentfulMetadata: ContentfulMetadata!
  equipmentCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0, where: HeroEquipmentFilter): HeroEquipmentCollection
  experience(locale: String): Int
  linkedFrom(allowedLocales: [String]): HeroLinkingCollections
  meta(locale: String): [String]
  name(locale: String): String
  stats(locale: String): String
  sys: Sys!
  type(locale: String): String
}

type HeroCollection {
  items: [Hero]!
  limit: Int!
  skip: Int!
  total: Int!
}

type HeroEquipmentCollection {
  items: [HeroEquipmentItem]!
  limit: Int!
  skip: Int!
  total: Int!
}

input HeroEquipmentFilter {
  AND: [HeroEquipmentFilter]
  OR: [HeroEquipmentFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  specialRulesCollection_exists: Boolean
  sys: SysFilter
}

union HeroEquipmentItem = Armour | BlackPowderWeapon | MeleeWeapon

input HeroFilter {
  AND: [HeroFilter]
  OR: [HeroFilter]
  contentfulMetadata: ContentfulMetadataFilter
  equipment: cfequipmentMultiTypeNestedFilter
  equipmentCollection_exists: Boolean
  experience: Int
  experience_exists: Boolean
  experience_gt: Int
  experience_gte: Int
  experience_in: [Int]
  experience_lt: Int
  experience_lte: Int
  experience_not: Int
  experience_not_in: [Int]
  meta_contains_all: [String]
  meta_contains_none: [String]
  meta_contains_some: [String]
  meta_exists: Boolean
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  stats: String
  stats_contains: String
  stats_exists: Boolean
  stats_in: [String]
  stats_not: String
  stats_not_contains: String
  stats_not_in: [String]
  sys: SysFilter
  type: String
  type_contains: String
  type_exists: Boolean
  type_in: [String]
  type_not: String
  type_not_contains: String
  type_not_in: [String]
}

type HeroLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  rosterCollection(limit: Int = 100, locale: String, order: [HeroLinkingCollectionsRosterCollectionOrder], preview: Boolean, skip: Int = 0): RosterCollection
}

enum HeroLinkingCollectionsRosterCollectionOrder {
  gold_ASC
  gold_DESC
  name_ASC
  name_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
  wyrdstone_ASC
  wyrdstone_DESC
}

enum HeroOrder {
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  AVIF

  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum ImageResizeFocus {
  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the top right."""
  TOP_RIGHT
}

enum ImageResizeStrategy {
  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
[See type definition](https://app.contentful.com/spaces/8hutbyum2dgr/content_types/meleeWeapon)
"""
type MeleeWeapon implements Entry {
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): MeleeWeaponDescription
  linkedFrom(allowedLocales: [String]): MeleeWeaponLinkingCollections
  name(locale: String): String
  range(locale: String): Int
  specialRulesCollection(limit: Int = 100, locale: String, order: [MeleeWeaponSpecialRulesCollectionOrder], preview: Boolean, skip: Int = 0, where: SpecialRuleFilter): MeleeWeaponSpecialRulesCollection
  strength(locale: String): Int
  sys: Sys!
}

type MeleeWeaponCollection {
  items: [MeleeWeapon]!
  limit: Int!
  skip: Int!
  total: Int!
}

type MeleeWeaponDescription {
  json: JSON!
  links: MeleeWeaponDescriptionLinks!
}

type MeleeWeaponDescriptionAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type MeleeWeaponDescriptionEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type MeleeWeaponDescriptionLinks {
  assets: MeleeWeaponDescriptionAssets!
  entries: MeleeWeaponDescriptionEntries!
  resources: MeleeWeaponDescriptionResources!
}

type MeleeWeaponDescriptionResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

input MeleeWeaponFilter {
  AND: [MeleeWeaponFilter]
  OR: [MeleeWeaponFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  range: Int
  range_exists: Boolean
  range_gt: Int
  range_gte: Int
  range_in: [Int]
  range_lt: Int
  range_lte: Int
  range_not: Int
  range_not_in: [Int]
  specialRules: cfSpecialRuleNestedFilter
  specialRulesCollection_exists: Boolean
  strength: Int
  strength_exists: Boolean
  strength_gt: Int
  strength_gte: Int
  strength_in: [Int]
  strength_lt: Int
  strength_lte: Int
  strength_not: Int
  strength_not_in: [Int]
  sys: SysFilter
}

type MeleeWeaponLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  henchmanCollection(limit: Int = 100, locale: String, order: [MeleeWeaponLinkingCollectionsHenchmanCollectionOrder], preview: Boolean, skip: Int = 0): HenchmanCollection
  heroCollection(limit: Int = 100, locale: String, order: [MeleeWeaponLinkingCollectionsHeroCollectionOrder], preview: Boolean, skip: Int = 0): HeroCollection
}

enum MeleeWeaponLinkingCollectionsHenchmanCollectionOrder {
  count_ASC
  count_DESC
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

enum MeleeWeaponLinkingCollectionsHeroCollectionOrder {
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

enum MeleeWeaponOrder {
  name_ASC
  name_DESC
  range_ASC
  range_DESC
  strength_ASC
  strength_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type MeleeWeaponSpecialRulesCollection {
  items: [SpecialRule]!
  limit: Int!
  skip: Int!
  total: Int!
}

enum MeleeWeaponSpecialRulesCollectionOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  armour(id: String!, locale: String, preview: Boolean): Armour
  armourCollection(limit: Int = 100, locale: String, order: [ArmourOrder], preview: Boolean, skip: Int = 0, where: ArmourFilter): ArmourCollection
  asset(id: String!, locale: String, preview: Boolean): Asset
  assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
  blackPowderWeapon(id: String!, locale: String, preview: Boolean): BlackPowderWeapon
  blackPowderWeaponCollection(limit: Int = 100, locale: String, order: [BlackPowderWeaponOrder], preview: Boolean, skip: Int = 0, where: BlackPowderWeaponFilter): BlackPowderWeaponCollection
  entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
  henchman(id: String!, locale: String, preview: Boolean): Henchman
  henchmanCollection(limit: Int = 100, locale: String, order: [HenchmanOrder], preview: Boolean, skip: Int = 0, where: HenchmanFilter): HenchmanCollection
  hero(id: String!, locale: String, preview: Boolean): Hero
  heroCollection(limit: Int = 100, locale: String, order: [HeroOrder], preview: Boolean, skip: Int = 0, where: HeroFilter): HeroCollection
  meleeWeapon(id: String!, locale: String, preview: Boolean): MeleeWeapon
  meleeWeaponCollection(limit: Int = 100, locale: String, order: [MeleeWeaponOrder], preview: Boolean, skip: Int = 0, where: MeleeWeaponFilter): MeleeWeaponCollection
  roster(id: String!, locale: String, preview: Boolean): Roster
  rosterCollection(limit: Int = 100, locale: String, order: [RosterOrder], preview: Boolean, skip: Int = 0, where: RosterFilter): RosterCollection
  specialRule(id: String!, locale: String, preview: Boolean): SpecialRule
  specialRuleCollection(limit: Int = 100, locale: String, order: [SpecialRuleOrder], preview: Boolean, skip: Int = 0, where: SpecialRuleFilter): SpecialRuleCollection
}

type ResourceLink {
  sys: ResourceSys!
}

type ResourceSys {
  linkType: String!
  type: String!
  urn: String!
}

"""
[See type definition](https://app.contentful.com/spaces/8hutbyum2dgr/content_types/roster)
"""
type Roster implements Entry {
  contentfulMetadata: ContentfulMetadata!
  gold(locale: String): Int
  henchmenCollection(limit: Int = 100, locale: String, order: [RosterHenchmenCollectionOrder], preview: Boolean, skip: Int = 0, where: HenchmanFilter): RosterHenchmenCollection
  heroesCollection(limit: Int = 100, locale: String, order: [RosterHeroesCollectionOrder], preview: Boolean, skip: Int = 0, where: HeroFilter): RosterHeroesCollection
  linkedFrom(allowedLocales: [String]): RosterLinkingCollections
  name(locale: String): String
  storage(locale: String): [String]
  sys: Sys!
  type(locale: String): String
  wyrdstone(locale: String): Int
}

type RosterCollection {
  items: [Roster]!
  limit: Int!
  skip: Int!
  total: Int!
}

input RosterFilter {
  AND: [RosterFilter]
  OR: [RosterFilter]
  contentfulMetadata: ContentfulMetadataFilter
  gold: Int
  gold_exists: Boolean
  gold_gt: Int
  gold_gte: Int
  gold_in: [Int]
  gold_lt: Int
  gold_lte: Int
  gold_not: Int
  gold_not_in: [Int]
  henchmen: cfHenchmanNestedFilter
  henchmenCollection_exists: Boolean
  heroes: cfHeroNestedFilter
  heroesCollection_exists: Boolean
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  storage_contains_all: [String]
  storage_contains_none: [String]
  storage_contains_some: [String]
  storage_exists: Boolean
  sys: SysFilter
  type: String
  type_contains: String
  type_exists: Boolean
  type_in: [String]
  type_not: String
  type_not_contains: String
  type_not_in: [String]
  wyrdstone: Int
  wyrdstone_exists: Boolean
  wyrdstone_gt: Int
  wyrdstone_gte: Int
  wyrdstone_in: [Int]
  wyrdstone_lt: Int
  wyrdstone_lte: Int
  wyrdstone_not: Int
  wyrdstone_not_in: [Int]
}

type RosterHenchmenCollection {
  items: [Henchman]!
  limit: Int!
  skip: Int!
  total: Int!
}

enum RosterHenchmenCollectionOrder {
  count_ASC
  count_DESC
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

type RosterHeroesCollection {
  items: [Hero]!
  limit: Int!
  skip: Int!
  total: Int!
}

enum RosterHeroesCollectionOrder {
  experience_ASC
  experience_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
}

type RosterLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum RosterOrder {
  gold_ASC
  gold_DESC
  name_ASC
  name_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  type_ASC
  type_DESC
  wyrdstone_ASC
  wyrdstone_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/8hutbyum2dgr/content_types/specialRule)
"""
type SpecialRule implements Entry {
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): SpecialRuleDescription
  linkedFrom(allowedLocales: [String]): SpecialRuleLinkingCollections
  sys: Sys!
  title(locale: String): String
}

type SpecialRuleCollection {
  items: [SpecialRule]!
  limit: Int!
  skip: Int!
  total: Int!
}

type SpecialRuleDescription {
  json: JSON!
  links: SpecialRuleDescriptionLinks!
}

type SpecialRuleDescriptionAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type SpecialRuleDescriptionEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type SpecialRuleDescriptionLinks {
  assets: SpecialRuleDescriptionAssets!
  entries: SpecialRuleDescriptionEntries!
  resources: SpecialRuleDescriptionResources!
}

type SpecialRuleDescriptionResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

input SpecialRuleFilter {
  AND: [SpecialRuleFilter]
  OR: [SpecialRuleFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
}

type SpecialRuleLinkingCollections {
  armourCollection(limit: Int = 100, locale: String, order: [SpecialRuleLinkingCollectionsArmourCollectionOrder], preview: Boolean, skip: Int = 0): ArmourCollection
  blackPowderWeaponCollection(limit: Int = 100, locale: String, order: [SpecialRuleLinkingCollectionsBlackPowderWeaponCollectionOrder], preview: Boolean, skip: Int = 0): BlackPowderWeaponCollection
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  meleeWeaponCollection(limit: Int = 100, locale: String, order: [SpecialRuleLinkingCollectionsMeleeWeaponCollectionOrder], preview: Boolean, skip: Int = 0): MeleeWeaponCollection
}

enum SpecialRuleLinkingCollectionsArmourCollectionOrder {
  name_ASC
  name_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum SpecialRuleLinkingCollectionsBlackPowderWeaponCollectionOrder {
  name_ASC
  name_DESC
  range_ASC
  range_DESC
  strength_ASC
  strength_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum SpecialRuleLinkingCollectionsMeleeWeaponCollectionOrder {
  name_ASC
  name_DESC
  range_ASC
  range_DESC
  strength_ASC
  strength_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum SpecialRuleOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
}

type Sys {
  environmentId: String!
  firstPublishedAt: DateTime
  id: String!
  publishedAt: DateTime
  publishedVersion: Int
  spaceId: String!
}

input SysFilter {
  firstPublishedAt: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_not_in: [DateTime]
  id: String
  id_contains: String
  id_exists: Boolean
  id_in: [String]
  id_not: String
  id_not_contains: String
  id_not_in: [String]
  publishedAt: DateTime
  publishedAt_exists: Boolean
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_in: [DateTime]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_not: DateTime
  publishedAt_not_in: [DateTime]
  publishedVersion: Float
  publishedVersion_exists: Boolean
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_in: [Float]
  publishedVersion_lt: Float
  publishedVersion_lte: Float
  publishedVersion_not: Float
  publishedVersion_not_in: [Float]
}

input cfHenchmanNestedFilter {
  AND: [cfHenchmanNestedFilter]
  OR: [cfHenchmanNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  count: Int
  count_exists: Boolean
  count_gt: Int
  count_gte: Int
  count_in: [Int]
  count_lt: Int
  count_lte: Int
  count_not: Int
  count_not_in: [Int]
  equipmentCollection_exists: Boolean
  experience: Int
  experience_exists: Boolean
  experience_gt: Int
  experience_gte: Int
  experience_in: [Int]
  experience_lt: Int
  experience_lte: Int
  experience_not: Int
  experience_not_in: [Int]
  meta_contains_all: [String]
  meta_contains_none: [String]
  meta_contains_some: [String]
  meta_exists: Boolean
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  stats: String
  stats_contains: String
  stats_exists: Boolean
  stats_in: [String]
  stats_not: String
  stats_not_contains: String
  stats_not_in: [String]
  sys: SysFilter
  type: String
  type_contains: String
  type_exists: Boolean
  type_in: [String]
  type_not: String
  type_not_contains: String
  type_not_in: [String]
}

input cfHeroNestedFilter {
  AND: [cfHeroNestedFilter]
  OR: [cfHeroNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  equipmentCollection_exists: Boolean
  experience: Int
  experience_exists: Boolean
  experience_gt: Int
  experience_gte: Int
  experience_in: [Int]
  experience_lt: Int
  experience_lte: Int
  experience_not: Int
  experience_not_in: [Int]
  meta_contains_all: [String]
  meta_contains_none: [String]
  meta_contains_some: [String]
  meta_exists: Boolean
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  stats: String
  stats_contains: String
  stats_exists: Boolean
  stats_in: [String]
  stats_not: String
  stats_not_contains: String
  stats_not_in: [String]
  sys: SysFilter
  type: String
  type_contains: String
  type_exists: Boolean
  type_in: [String]
  type_not: String
  type_not_contains: String
  type_not_in: [String]
}

input cfSpecialRuleNestedFilter {
  AND: [cfSpecialRuleNestedFilter]
  OR: [cfSpecialRuleNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
}

input cfequipmentMultiTypeNestedFilter {
  AND: [cfequipmentMultiTypeNestedFilter]
  OR: [cfequipmentMultiTypeNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  specialRulesCollection_exists: Boolean
  sys: SysFilter
}